#!/bin/bash

CONTROLDIR="$HOME/alice/control"
ANALYSISDIR="$HOME/alice/analysis"
SIMRUNSDIR="$HOME/alice/simruns"

LASTJOBFILE=${CONTROLDIR}/LASTJOB
LASTSIMRUNCOUNTERFILE=${CONTROLDIR}/LASTSIMRUN

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
YELLOW='\033[1;33m'


Usage()
{
  cat <<-END

${0##*/} is a tool to help organize the generation of MC data and run O2 macros over such data.

  Scripts are executed in new directories with symbolic links to access the data.

  Usage:

   0) Configure this system to run ${0##*/}

      ${0##*/} init

   This will create the following files and folders used by ${0##*/}:
   \$HOME/alice/simruns
     Input data
   \$HOME/alice/analysis
    Analysis execution and output
   \$HOME/alice/control
    Indexes used by ${0##*/} are stored in this directory:
      LASTJOB stores the ID of the last job executed by ${0##*/}
      LASTSIMRUN stores the ID of the last data generated by ${0##*/}

   1) Listing data and execution logs

     ${0##*/} data
      Lists data available to ${0##*/} on \$HOME/alice/simruns

     ${0##*/} log
      Print summary of execution logs on \$HOME/alice/analysis

   2) Running scripts on data

    ${0##*/} -d DATA_ID -s jobscript -m \"Some Message\"

  Mandatory arguments

    -d
     Specifies the data to be analysed
    
    -s 
     Specifies the script to be executed

    -m
     Log a message summarizing the analysis. Displayed by '${0##*/} log' 
  
   3) Generating MC data

    ${0##*/} -g "CMD"
      Generate a new set of MC data on simruns directory. Multi argument commands must be quoted.

     ex. ${0##*/} -g "genpythia -n 500 -j 4"
         Will call genpythia to generate 500 events with 4 workers. See 'genpythia --help' for details.
END

  exit
}

init () {

mkdir -p $CONTROLDIR
mkdir -p $ANALYSISDIR
mkdir -p $SIMRUNSDIR

if [ -f "$LASTJOBFILE" ]; then
    echo "${0##*/} already initialized."
    echo -n "$LASTJOBFILE exists with last jobID = "
    cat $LASTJOBFILE
else
    
echo "Enter first job ID for this machine [default = 0]: "
read JOBID
JOBID=${JOBID:-"0"}
((JOBID--))
echo ${JOBID} > ${LASTJOBFILE}
echo "Enter first SIMRUN ID for this machine [default = 0]: "
read SIMRUNID
SIMRUNID=${SIMRUNID:-"0"}
((SIMRUNID--))
echo ${SIMRUNID} > ${LASTSIMRUNCOUNTERFILE}
fi

}


gen () {

SIMRUNID=`cat ${LASTSIMRUNCOUNTERFILE}` ; ((SIMRUNID++)) ; echo ${SIMRUNID} > ${LASTSIMRUNCOUNTERFILE} ;
SIMRUNDIRID=${SIMRUNSDIR}/${SIMRUNID}


if [ -d "${SIMRUNDIRID}" ]; then
    echo -e "${RED}${SIMRUNDIRID} already exists. Generation aborted.${NC}"
    exit
fi

echo -e "\n${YELLOW}[`date`]: Creating simulation run at ${SIMRUNDIRID} ${NC}"
mkdir -p ${SIMRUNDIRID}
cd ${SIMRUNDIRID} 
echo -e "  * Generation command: ${SIMRUNCMD}"
$SIMRUNCMD
echo -e "\n${YELLOW}[`date`]: Completed simulation run at ${SIMRUNDIRID} ${NC}"
exit

}



rqueue () {


while [ $# -gt 0 ] ; do
    case $1 in
      init)
      init;
      exit
      ;;
      -g)
      shift 1
      SIMRUNCMD="$@";
      gen \"$SIMRUNCMD\"
      exit
      ;;
      -s)
      JOBSCRIPT="$2";
      shift 2
      ;;
      -d)
      DATAID="$2";
      shift 2
      ;;
      -m)
      MESSAGE="$2";
      shift 2
      ;;
      -t)
      O2TAG="$2";
      shift 2
      ;;
      --test)
      MODE="test";
      shift
      ;;
      data)
      echo -e "Data available to ${0##*/} : \n"
      echo -n -e " ID \t    Description\n"
      ls ${SIMRUNSDIR}/*/data_description | sort | cut -d / -f 6  | parallel -k  "echo -n -e {} '\t'  ; head -n1 ${SIMRUNSDIR}/{}/data_description"
      exit
      ;;
      log)
      ls -rt -d -1 ${ANALYSISDIR}/$MODE/*/job_info | sort -g | parallel -k cat {} | less -r       
      exit
      ;;

      -h|--help)
      Usage
      exit
      ;;
      *) echo -e "${RED}Wrong input${NC}"; Usage;
  
esac
done

if [ -z ${JOBSCRIPT+x} ]; then echo "Missing argument" ; Usage ; fi
if [ -z ${DATAID+x} ]; then echo "Missing argument" ; Usage ; fi
if [ -z ${MESSAGE+x} ]; then echo "Missing argument" ; Usage ; fi


COUNTERFILE=${CONTROLDIR}/LASTJOB${MODE}
CTRL_LOG=${CONTROLDIR}/LOG${MODE}
JOBID=`cat $COUNTERFILE` ; ((JOBID++)) ; echo ${JOBID} > $COUNTERFILE ;
JOBID=${JOBID}${MODE}
RESULTSDIR=${ANALYSISDIR}/${MODE}/${JOBID}
DATADIR=${SIMRUNSDIR}/$DATAID
JOBOUTPUT=job_output.log
JOBINFO=job_info
JOBINFO_O2=${JOBINFO}_O2
LOG="tee -a ${CTRL_LOG}"
INFO="tee -a ${JOBINFO}"
O2INFO="${JOBINFO_O2}"


if [ -d "$RESULTSDIR" ]; then
    echo -e "${RED}${RESULTSDIR} already exists. Aborting.${NC}"
    exit
fi

mkdir -p $RESULTSDIR
cp $JOBSCRIPT $RESULTSDIR
cd $RESULTSDIR
chmod +x ./$JOBSCRIPT

# Symbolic links for data files
for DATAFILE in $(ls -rd  -1 "$DATADIR"/*)
 do
 ln -s $DATAFILE
 done

# Record Job information
echo -e "\n${YELLOW}[`date`]: Starting job ID = ${JOBID} on `pwd`${NC}" | $LOG | $INFO
echo -e " ==> JOB ID: ${JOBID} " | $LOG | $INFO
echo -e "  * Message: ${MESSAGE} " | $LOG | $INFO
echo -e "  * DataID: ${DATAID}" | $LOG | $INFO
echo -e "  * Data description: `head -n 1 ${DATADIR}/data_description`" | $LOG | $INFO
echo -e "  * Data Location: ${DATADIR}" | $LOG | $INFO
echo -e "  * Script: ${JOBSCRIPT}" | $LOG | $INFO
echo -e "  * Timestamp: [`date`] " | $LOG | $INFO

if ! [ -z ${O2TAG+x} ] 
then
   echo -e "  * O2 tag: $O2TAG " | $LOG | $INFO
   O2Checkout $O2TAG  || { echo -e "${RED}[`date`]: JobID ${JOBID} failed. Unable to checkout ${O2TAG}.${NC}" | $LOG | $INFO ; exit 1; }
   if qbuild > O2Build.log
   then
       echo -e "  * O2 Build completed at [`date`] " | $LOG | $INFO
   else
       echo -e "  * O2 Build failed on [`date`] " | $LOG | $INFO
       echo -e "${RED}[`date`]: O2 Build failed for tag ${O2TAG}; JobID = ${JOBID} on `pwd`${NC}\n" | $LOG | $INFO
       exit 1
    fi
else
       echo -e "  * Using current O2. O2 state saved in ${JOBINFO_O2}" | $LOG | $INFO
fi
   
O2Info > $O2INFO

# Execute script
if ./$JOBSCRIPT > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2) 
then
     echo -e "${YELLOW}[`date`]: JobID ${JOBID} completed on `pwd`${NC}\n" | $LOG | $INFO
     exit 0
else
    echo -e "${RED}[`date`]: JobID ${JOBID} failed on `pwd` ${NC}\n" | $LOG | $INFO
    exit 1
fi    

}



O2Info()
{
pushd ~/alice/O2 > /dev/null
echo -e "============= O2 Status ============="
git status
git log -1
echo ""
echo === git diff ===
git diff
git diff --cached
echo === /git diff ===
popd > /dev/null
}

O2Checkout()
{
pushd ~/alice/O2 > /dev/null
git checkout $1
STATUS=$?
popd > /dev/null
return $STATUS
}



rqueue "$@"
